// main.go
package main

import (
	"fmt"
	"math"
)

//功能：lab 转 xyz 的转换函数（公式的统一部分）
func g(t float64) float64 {
	var r float64
	//fmt.Println("[i]g called.")
	if t > 6.0/29 {
		r = 1.0 * t * t * t
	} else {
		r = 3.0 * (6.0 / 29) * (6.0 / 29) * (t - 4.0/29)
	}

	return r
}

//功能：XYZ 转 RGB的gamma修正函数
func s(t float64) float64 {
	var r float64 = 0
	//fmt.Println("[i]s called.")
	if t > 0.0031308 {
		r = float64(1.055*math.Pow(float64(t), float64(1.0/2.4)) - 0.055)
	} else {
		r = 12.92 * t
	}
	return r
}

//功能：1x3与3x3矩阵的相乘，只为XYZ颜色矩阵与RGB转换矩阵相乘所写
//参数：arg1：xyz值数组；arg2：转换矩阵数组。
//返回值：无
func matrix_multi(arg1 [3]float64, arg2 [3][3]float64) [3]float64 {
	var arg3 [3]float64
	// 遍历矩阵，解析一行
	for i, r_v := range arg2 {
		// 解析行中元素
		for j, c_v := range r_v {
			// 把对应xyz的列与该行元素依次相乘并求对结果求和
			arg3[i] = arg3[i] + arg1[j]*c_v
			// fmt.Println(i, j, a_v, l_v)
		}
	}
	//fmt.Printf("结果是：%f,%f,%f\n", arg3[0], arg3[1], arg3[2])
	return arg3
}

// 功能：调用matrix_multi来计算结果并辅以一定的处理以打印输出
// 参数：和matrix_multi一样
// 返回值：无
func res_print(arg1 [3]float64, arg2 [3][3]float64) {
	var res [3]float64 = matrix_multi(arg1, arg2)
	fmt.Println(math.Floor(s(res[0])*255+0.5), math.Floor(s(res[1])*255+0.5), math.Floor(s(res[2])*255+0.5))
}

// 功能：测试24个转换矩阵，寻找最接近网上转换工具得出的数值。
// 算法：lab先通过对应函数转xyz，再通过转换矩阵得到rgb，对其gamma修正并放大到0~255的范围。
// 其他：出现的负数是因为转换会有值域偏移，其实后期可以0~1范围修正。
func main() {
	// 预设Lab测试值
	var l float64 = 57.23
	var a float64 = -24.31
	var b float64 = -27.26

	// 公式参数
	var mXn float64 = 0.950456
	var mYn float64 = 1.0000
	var mZn float64 = 1.0887

	fmt.Println("[i]main called.")

	// lab to rgb 转换公式
	var mY float64 = mYn * g((1.0/116)*(l+16))
	var mX float64 = mXn * g((1.0/116)*(l+16)+(1.0/500)*a)
	var mZ float64 = mZn * g((1.0/116)*(l+16)-(1.0/200)*b)
	// 得到xyz矩阵
	xyz := [3]float64{mX, mY, mZ}

	// xyz to rgb 转换矩阵
	l11 := [3]float64{2.0413690, -0.5649464, -0.344694}
	l12 := [3]float64{-0.9692660, 1.8760108, 0.0415560}
	l13 := [3]float64{0.0134474, -0.1183897, 1.0154096}
	var m1 [3][3]float64 = [3][3]float64{l11, l12, l13}

	l21 := [3]float64{2.9515373, -1.2894116, -0.473844}
	l22 := [3]float64{-1.0851093, 1.9908566, 0.0372026}
	l23 := [3]float64{0.0854934, -0.2694964, 1.0912975}
	var m2 [3][3]float64 = [3][3]float64{l21, l22, l23}

	l31 := [3]float64{1.7552599, -0.4836786, -0.253000}
	l32 := [3]float64{-0.5441336, 1.5068789, 0.0215528}
	l33 := [3]float64{0.0063467, -0.0175761, 1.2256959}
	var m3 [3][3]float64 = [3][3]float64{l31, l32, l33}

	l41 := [3]float64{1.6832270, -0.4282363, -0.236018}
	l42 := [3]float64{-0.7710229, 1.7065571, 0.0446900}
	l43 := [3]float64{0.0400013, -0.0885376, 1.2723640}
	var m4 [3][3]float64 = [3][3]float64{l41, l42, l43}

	l51 := [3]float64{2.7454669, -1.1358136, -0.435026}
	l52 := [3]float64{-0.9692660, 1.8760108, 0.0415560}
	l53 := [3]float64{0.0112723, -0.1139754, 1.0132541}
	var m5 [3][3]float64 = [3][3]float64{l51, l52, l53}

	l61 := [3]float64{2.3706743, -0.9000405, -0.470633}
	l62 := [3]float64{-0.5138850, 1.4253036, 0.0885814}
	l63 := [3]float64{0.0052982, -0.0146949, 1.0093968}
	var m6 [3][3]float64 = [3][3]float64{l61, l62, l63}

	l71 := [3]float64{2.6422874, -1.2234270, -0.393014}
	l72 := [3]float64{-1.1119763, 2.0590183, 0.0159614}
	l73 := [3]float64{0.0821699, -0.2807254, 1.4559877}
	var m7 [3][3]float64 = [3][3]float64{l71, l72, l73}

	l81 := [3]float64{1.7603902, -0.4881198, -0.253612}
	l82 := [3]float64{-0.7126288, 1.6527432, 0.0416715}
	l83 := [3]float64{0.0078207, -0.0347411, 1.2447743}
	var m8 [3][3]float64 = [3][3]float64{l81, l82, l83}

	l91 := [3]float64{1.7827618, -0.4969847, -0.269010}
	l92 := [3]float64{-0.9593623, 1.9477962, -0.027580}
	l93 := [3]float64{0.0859317, -0.1744674, 1.3228273}
	var m9 [3][3]float64 = [3][3]float64{l91, l92, l93}

	la1 := [3]float64{2.0043819, -0.7304844, -0.245005}
	la2 := [3]float64{-0.7110285, 1.6202126, 0.0792227}
	la3 := [3]float64{0.0381263, -0.0868780, 1.2725438}
	var ma [3][3]float64 = [3][3]float64{la1, la2, la3}

	lb1 := [3]float64{1.9099961, -0.5324542, -0.288209}
	lb2 := [3]float64{-0.9846663, 1.9991710, -0.028308}
	lb3 := [3]float64{0.0583056, -0.1183781, 0.8975535}
	var mb [3][3]float64 = [3][3]float64{lb1, lb2, lb3}

	lc1 := [3]float64{3.0628971, -1.3931791, -0.475751}
	lc2 := [3]float64{-0.9692660, 1.8760108, 0.0415560}
	lc3 := [3]float64{0.0678775, -0.2288548, 1.0693490}
	var mc [3][3]float64 = [3][3]float64{lc1, lc2, lc3}

	ld1 := [3]float64{1.3459433, -0.2556075, -0.051111}
	ld2 := [3]float64{-0.5445989, 1.5081673, 0.0205351}
	ld3 := [3]float64{0.0000000, 0.0000000, 1.2118128}
	var md [3][3]float64 = [3][3]float64{ld1, ld2, ld3}

	le1 := [3]float64{3.5053960, -1.7394894, -0.543964}
	le2 := [3]float64{-1.0690722, 1.9778245, 0.0351722}
	le3 := [3]float64{0.0563200, -0.1970226, 1.0502026}
	var me [3][3]float64 = [3][3]float64{le1, le2, le3}

	lf1 := [3]float64{3.2404542, -1.5371385, -0.498531}
	lf2 := [3]float64{-0.9692660, 1.8760108, 0.0415560}
	lf3 := [3]float64{0.0556434, -0.2040259, 1.0572252}
	var mf [3][3]float64 = [3][3]float64{lf1, lf2, lf3}

	lg1 := [3]float64{1.4628067, -0.1840623, -0.274360}
	lg2 := [3]float64{-0.5217933, 1.4472381, 0.0677227}
	lg3 := [3]float64{0.0349342, -0.0968930, 1.2884099}
	var mg [3][3]float64 = [3][3]float64{lg1, lg2, lg3}

	lh1 := [3]float64{1.9624274, -0.6105343, -0.341340}
	lh2 := [3]float64{-0.9787684, 1.9161415, 0.0334540}
	lh3 := [3]float64{0.0286869, -0.1406752, 1.3487655}
	var mh [3][3]float64 = [3][3]float64{lh1, lh2, lh3}

	li1 := [3]float64{2.8510695, -1.3605261, -0.470828}
	li2 := [3]float64{-1.0927680, 2.0348871, 0.0227598}
	li3 := [3]float64{0.1027403, -0.2964984, 1.4510659}
	var mi [3][3]float64 = [3][3]float64{li1, li2, li3}

	lj1 := [3]float64{2.6502856, -1.2014485, -0.428993}
	lj2 := [3]float64{-0.9787684, 1.9161415, 0.0334540}
	lj3 := [3]float64{0.0264570, -0.1361227, 1.3458542}
	var mj [3][3]float64 = [3][3]float64{lj1, lj2, lj3}

	lk1 := [3]float64{2.3638081, -0.8676030, -0.498816}
	lk2 := [3]float64{-0.5005940, 1.3962369, 0.1047562}
	lk3 := [3]float64{0.0141712, -0.0306400, 1.2323842}
	var mk [3][3]float64 = [3][3]float64{lk1, lk2, lk3}

	ll1 := [3]float64{1.8464881, -0.5521299, -0.276645}
	ll2 := [3]float64{-0.9826630, 2.0044755, -0.069039}
	ll3 := [3]float64{0.0736477, -0.1453020, 1.3018376}
	var ml [3][3]float64 = [3][3]float64{ll1, ll2, ll3}

	lm1 := [3]float64{2.9603944, -1.4678519, -0.468510}
	lm2 := [3]float64{-0.9787684, 1.9161415, 0.0334540}
	lm3 := [3]float64{0.0844874, -0.2545973, 1.4216174}
	var mm [3][3]float64 = [3][3]float64{lm1, lm2, lm3}

	ln1 := [3]float64{3.3921940, -1.8264027, -0.538552}
	ln2 := [3]float64{-1.0770996, 2.0213975, 0.0207989}
	ln3 := [3]float64{0.0723073, -0.2217902, 1.3960932}
	var mn [3][3]float64 = [3][3]float64{ln1, ln2, ln3}

	lo1 := [3]float64{3.1338561, -1.6168667, -0.490614}
	lo2 := [3]float64{-0.9787684, 1.9161415, 0.0334540}
	lo3 := [3]float64{0.0719453, -0.2289914, 1.4052427}
	var mo [3][3]float64 = [3][3]float64{lo1, lo2, lo3}

	// 分别调用并输出结果
	res_print(xyz, m1)
	res_print(xyz, m2)
	res_print(xyz, m3)
	res_print(xyz, m4)
	res_print(xyz, m5)
	res_print(xyz, m6)
	res_print(xyz, m7)
	res_print(xyz, m8)
	res_print(xyz, m9)
	res_print(xyz, ma)
	res_print(xyz, mb)
	res_print(xyz, mc)
	res_print(xyz, md)
	res_print(xyz, me)
	res_print(xyz, mf)
	res_print(xyz, mg)
	res_print(xyz, mh)
	res_print(xyz, mi)
	res_print(xyz, mj)
	res_print(xyz, mk)
	res_print(xyz, ml)
	res_print(xyz, mm)
	res_print(xyz, mn)
	res_print(xyz, mo)
}
